<?php
declare(strict_types = 1);
namespace Slothsoft\Savegame\Node;

use Slothsoft\Savegame\Editor;
use Slothsoft\Savegame\EditorElement;
use DomainException;

class NodeFactory
{
    private $editor;
    public function __construct(Editor $editor) {
        $this->editor = $editor;
    }
    /**
     *
     * @param \Slothsoft\Savegame\EditorElement $strucElement
     * @param \Slothsoft\Savegame\Node\AbstractNode $parentValue
     * @return \Slothsoft\Savegame\Node\AbstractNode
     */
    public function createNode(EditorElement $strucElement, ?AbstractNode $parentValue = null): AbstractNode
    {
        $value = $this->constructValue($strucElement->getTag());
        $value->init($strucElement, $parentValue);
        return $value;
    }
    
    private function constructValue(string $tag): AbstractNode
    {
        switch ($tag) {
            // root
            case 'savegame.editor':
                return new SavegameNode($this->editor, $this);
            case 'archive':
                return new ArchiveNode();
            case 'for-each-file':
                return new ForEachFileNode();
            case 'file':
                return new FileContainer();
                
                // values
            case 'integer':
                return new IntegerValue();
            case 'signed-integer':
                return new SignedIntegerValue();
            case 'string':
                return new StringValue();
            case 'bit':
                return new BitValue();
            case 'select':
                return new SelectValue();
            case 'event-script':
                return new EventScriptValue();
            case 'binary':
                return new BinaryValue();
            case 'image':
                return new ImageValue();
                
                // containers
            case 'group':
                return new GroupContainer();
            case 'instruction':
                return new InstructionContainer();
                
                // instructions
            case 'bit-field':
                return new BitFieldInstruction();
            case 'string-dictionary':
                return new StringDictionaryInstruction();
            case 'event-dictionary':
                return new EventDictionaryInstruction();
            case 'event':
                return new EventInstruction();
            case 'event-step':
                return new EventStepInstruction();
            case 'repeat-group':
                return new RepeatGroupInstruction();
            case 'use-global':
                return new UseGlobalInstruction();
            case 'image-map':
                return new ImageMapInstruction();
            case 'image-pile':
                return new ImagePileInstruction();
                
            default:
                throw new DomainException(sprintf('unknown type: "%s"', $tag));
        }
    }
}


